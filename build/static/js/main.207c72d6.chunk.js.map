{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","isred","active","props","className","onClick","Card","CardContent","Typography","color","casesTypeColor","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","pow","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","App","useState","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setmapCenter","mapCountries","setMapCountries","mapZoom","setCasesType","useEffect","fetch","then","response","json","name","value","iso2","getCountriesData","onCountryChange","event","CountryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","e","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.207c72d6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css'\r\nimport {Card,CardContent,Typography } from '@material-ui/core';\r\nfunction InfoBox({title,cases,total,isred,active, ...props}) {\r\n    return (\r\n        <div  className = {`info_box ${active && \"info_box--selected\"} ${active && isred && \"info_box--red\"} ` }  onClick =  {props.onClick}>\r\n            <Card>\r\n                \r\n                <CardContent>\r\n                    <Typography color = \"textSecondary\" className = \"infoBox_title\">\r\n                        {title}\r\n                    </Typography>\r\n                    <h2 className = {`infoBox_cases ${!isred && \"info_box--recovered\"}`}>\r\n                        {cases}\r\n                    </h2>\r\n                    <Typography className = \"infoBox_total\">\r\n                       Total:  {total}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\nexport default InfoBox","import React from \"react\";\r\nimport  { Circle,Popup } from 'react-leaflet';\r\nimport numeral from \"numeral\";\r\n\r\nexport const casesTypeColor = {\r\n    cases : {\r\n        hex: \"#CC1034\",\r\n        multiplier:700,\r\n    },\r\n    recovered : {\r\n        hex: \"#7dd71d\",\r\n        multiplier:800,\r\n    },\r\n    deaths : {\r\n        hex: \"#fb4443\",\r\n        multiplier:2000,\r\n    }\r\n}\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    sortedData.sort((a,b) => {\r\n        if (a.cases>b.cases)\r\n        {\r\n            return -1;\r\n        }\r\n        else{\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n};\r\nexport const showDataOnMap = (data,casesType=\"cases\" ) => {\r\n    return (\r\n\r\n        data.map((country) => (\r\n            <Circle\r\n                center={[country.countryInfo.lat, country.countryInfo.long]}\r\n                fillOpacity={0.4}\r\n                color={casesTypeColor[casesType].hex}\r\n                fillColor={casesTypeColor[casesType].hex}\r\n                radius = {Math.pow(Math.sqrt(Math.sqrt(country[casesType]))*casesTypeColor[casesType].multiplier,1.25 )}\r\n\r\n            >\r\n                <Popup>\r\n                    <div className = \"infoContainer\">\r\n                        <div className = \"infoFlag\" style = {{backgroundImage: `url(${country.countryInfo.flag})`}}></div>\r\n                        <div className = \"infoName\">{country.country}</div>\r\n                        <div className = \"infoCases\">Cases: {numeral(country.cases).format()}</div>\r\n                        <div className = \"infoRecovered\">Recovered: {numeral(country.recovered).format()}</div>\r\n                        <div className = \"infoDeaths\">Deaths: {numeral(country.deaths).format()}</div>\r\n\r\n                    </div>\r\n                </Popup>\r\n            </Circle>\r\n        ))\r\n    );\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>  (\r\n    stat? `+${numeral(stat).format(\"0.0a\")}` : \"0\"\r\n)\r\n","import React from 'react'\r\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\r\nimport  {showDataOnMap}  from './util';\r\nimport \"./Map.css\";\r\n\r\nfunction Map({countries,casesType,center,zoom}) {\r\n    \r\n    return (\r\n        <div className = \"map\">\r\n           \r\n           <LeafletMap center = {center} zoom = {zoom}>\r\n                <TileLayer\r\n                    url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href = \"http://osm.org/copyright\">Open Street </a> Contributors'\r\n\r\n               />\r\n            {showDataOnMap(countries,casesType)}\r\n           </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\nexport default Map","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from \"numeral\";\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className = \"table\">\r\n            {\r\n                countries.map(({country,cases}) =>  (\r\n                    <tr>\r\n                        <td> {country}</td>\r\n                        <td><strong>{numeral(cases).format()}</strong> </td>\r\n\r\n                    </tr>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","import React, { useState, useEffect } from 'react';\r\nimport { FormControl,MenuItem,Select,Card } from '@material-ui/core';\r\nimport './App.css';\r\n\r\nimport InfoBox from './InfoBox';\r\nimport Map from './Map';\r\nimport Table from './Table'\r\nimport {sortData, prettyPrintStat} from './util';\r\nimport LineGraph from './LineGraph';\r\nimport \"leaflet/dist/leaflet.css\";\r\nfunction App() {\r\n  const [countries,setCountries] = useState([]  );\r\n  const [country,setCountry] = useState(\"WorldWide\");\r\n  const [countryInfo,setCountryInfo] = useState({});\r\n  const [tableData,setTableData] = useState([]  );\r\n  const [mapCenter,setmapCenter] = useState({lat: 34.80746,lng: -40.4796});\r\n  const [mapCountries,setMapCountries] = useState([]);\r\n  const [mapZoom,setMapZoom] = useState(3);\r\n  const [casesType,setCasesType] = useState(\"cases\");\r\n  useEffect(()=>{\r\n    fetch (\"https://disease.sh/v3/covid-19/all\").then(response => response.json()).then(\r\n      (data) => {\r\n        \r\n        setCountryInfo(data);\r\n      }\r\n    );\r\n  },[]);\r\n  useEffect(()=>{\r\n    const getCountriesData=async()=>{\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then((response) => response.json()).then((data) => {\r\n        const countries = data.map((country) => (\r\n          {\r\n          name: country.country,\r\n          value: country.countryInfo.iso2\r\n          }\r\n        ));\r\n        setMapCountries(data);\r\n        const sortedData = sortData(data);\r\n        setMapCountries(data);\r\n        setTableData(sortedData);\r\n        setCountries(countries);\r\n        \r\n      })\r\n  \r\n    }\r\n    getCountriesData();\r\n  },[]);\r\n  const onCountryChange = async (event) => {\r\n    const CountryCode = event.target.value;\r\n    //\r\n\r\n    const url = (CountryCode === \"WorldWide\") ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${CountryCode}`;\r\n\r\n    await fetch (url).then(response => response.json()).then(\r\n      (data) => {\r\n        setCountry(CountryCode);\r\n        setCountryInfo(data);\r\n        if (CountryCode === \"WorldWide\")\r\n        {\r\n          setmapCenter({lat: 34.80746,lng: -40.4796});\r\n        }\r\n        else\r\n        {\r\n          setmapCenter([data.countryInfo.lat,data.countryInfo.long]);\r\n        }\r\n      }\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"app\">\r\n        <div  className = \"appLeft\">\r\n          <div className = \"app_header\"> \r\n          <h1>Covid 19 Tracker </h1>\r\n          <FormControl className = \"app_dropdown\">\r\n          \r\n            <Select variant = \"outlined\" onChange = {onCountryChange} value = {country}>\r\n            <MenuItem value = \"WorldWide\">WorldWide</MenuItem>\r\n            {\r\n              \r\n              countries.map((country) => (\r\n              <MenuItem value = {country.value}>{country.name}</MenuItem>\r\n              ))\r\n            }\r\n\r\n            </Select>\r\n\r\n          </FormControl>\r\n          </div>\r\n          <div className = \"app_stats\">\r\n            <InfoBox title = \"Corona Virus Cases\" cases ={prettyPrintStat(countryInfo.todayCases)}  total = {countryInfo.cases} onClick = {(e) => setCasesType(\"cases\") } active = {casesType === \"cases\"} isred></InfoBox> \r\n            <InfoBox title = \"Recovered\" cases = {prettyPrintStat(countryInfo.todayRecovered)}  total = {countryInfo.recovered} onClick = {(e) => setCasesType(\"recovered\")} active = {casesType === \"recovered\"}></InfoBox> \r\n            <InfoBox title = \"Deaths\" cases = {prettyPrintStat(countryInfo.todayDeaths)}  total = {countryInfo.deaths} onClick = {(e) => setCasesType(\"deaths\")} active = {casesType === \"deaths\"} isred></InfoBox>         \r\n          </div>\r\n          {/* Maps */}\r\n            <Map\r\n            countries = {mapCountries}\r\n            casesType = {casesType}\r\n            center = {mapCenter}\r\n            zoom = {mapZoom}\r\n            ></Map>\r\n        \r\n  \r\n        </div>\r\n        \r\n          \r\n          <Card className=\"app_right\">\r\n          <h4>Live Cases by Country\r\n          </h4>\r\n          <Table countries = {tableData}></Table>\r\n          \r\n          \r\n          </Card>\r\n          {/* {Table} */}\r\n          {/* Graph */}\r\n        \r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers:\r\nserviceWorker.unregister();"],"sourceRoot":""}